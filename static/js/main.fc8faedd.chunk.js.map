{"version":3,"sources":["comp/MyMemeApp.jsx","meme/one.jsx","reportWebVitals.js","logo/K_Logo_White.png","logo/google-badge.png","index.js"],"names":["MyMemeApp","template","useState","image","setImage","canvas","useRef","topText","setTopText","bottomText","setBottomText","fontSize","setFontSize","fontFamily","setFontFamily","fontColor","setFontColor","useEffect","catImage","Image","crossOrigin","src","url","onload","ctx","current","getContext","fillStyle","drawImage","font","textAlign","fillText","className","id","ref","width","height","style","objectFit","type","placeholder","value","onChange","e","target","name","event","img","files","URL","createObjectURL","console","log","min","max","defaultValue","onClick","document","getElementById","toBlob","blob","FileSaver","saveAs","One","templates","setTemplates","setTemplate","fetch","then","x","json","response","data","memes","aria-label","href","aria-current","class","map","border","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fc8faedd.chunk.js","sourcesContent":["import FileSaver from 'file-saver';\r\n\r\nimport { React,useEffect,useRef,useState } from 'react';\r\n\r\nconst MyMemeApp = ({template}) => {\r\n\r\n    const [image, setImage] = useState(null)\r\n    const canvas = useRef(null)\r\n    const [topText, setTopText] = useState('')\r\n    const [bottomText, setBottomText] = useState('')\r\n    const [fontSize,setFontSize]=useState(35);\r\n    const[fontFamily,setFontFamily]=useState(\"helvetica\");\r\n    const[fontColor,setFontColor]=useState(\"red\");\r\n   \r\n\r\n    useEffect(() => {\r\n      const catImage = new Image();\r\n      catImage.crossOrigin = 'Anonymous';\r\n      catImage.src = template.url;\r\n      catImage.onload = () => setImage(catImage)\r\n    }, [])\r\n\r\n    const imageUpload=(event)=>{\r\n        var img=event.target.files[0];\r\n        \r\n        const catImage = new Image();\r\n        catImage.src = URL.createObjectURL(img);\r\n        catImage.onload = () => setImage(catImage)\r\n        \r\n      };\r\n      \r\n      useEffect(() => {\r\n        if(image && canvas) {  \r\n  \r\n          const ctx = canvas.current.getContext(\"2d\")\r\n          ctx.fillStyle = \"black\"\r\n         \r\n          ctx.drawImage(image, 0, 0,500,600)\r\n    \r\n          ctx.font = `${fontSize}px ${fontFamily}`\r\n          ctx.fillStyle = `${fontColor}`\r\n          ctx.textAlign = \"center\"\r\n          \r\n         \r\n    \r\n          ctx.fillText(topText, 250, 50)\r\n          ctx.fillText(bottomText, 250,550)\r\n    \r\n        }\r\n      }, [image, canvas, topText, bottomText,fontColor,fontFamily,fontSize])\r\n    \r\n\r\n  \r\n\r\n\r\n    const font=(event)=>{\r\n      console.log(event.target.value);\r\n      setFontSize(event.target.value);\r\n        //$(\"#upper\").css(\"font-size\",\"fontSize\");\r\n    } \r\n    const fontFamilyFun=(event)=>{\r\n        console.log(event.target.value);\r\n        setFontFamily(event.target.value);\r\n    }\r\n    const fontColorFun=(event)=>{\r\n        setFontColor(event.target.value);\r\n    }\r\n  \r\n   function download(){\r\n\r\n      var canvas = document.getElementById(\"myCanvas\");\r\n      canvas.toBlob(function(blob) {\r\n      FileSaver.saveAs(blob, \"pretty image.jpg\");\r\n     \r\n  });\r\n  \r\n    }\r\n \r\n    return (\r\n      <div>\r\n        \r\n        <div className=\"bg-success\"> \r\n        <div className=\"container bg-dark\">\r\n            <div className=\"row\"> \r\n            <div className=\"col-12  meme p-4\">\r\n            <canvas id=\"myCanvas\" className=\"col-12 col-sm-4 mx-auto p-2\"\r\n            ref={canvas}\r\n            width=\"500\"\r\n            height=\"600\"\r\n            style={{ objectFit: \"contain\" }}\r\n          /> \r\n            </div>\r\n            </div>\r\n  \r\n        <div className=\"container cont p-3 form-inline\">\r\n        <input type=\"text\" className=\"form-control col-sm-4 mx-auto mb-2\" placeholder=\"Top Text\"\r\n            value={topText}\r\n            onChange={e => setTopText(e.target.value)}\r\n          />\r\n          <br />\r\n          <input type=\"text\" className=\"form-control col-sm-4 mx-auto mb-2\" placeholder=\"Bottom Text\"\r\n            value={bottomText}\r\n            onChange={e => setBottomText(e.target.value)}\r\n          />\r\n            <input className=\"form-control col-sm-3 mx-auto mb-2\" type=\"file\" name=\"myImage\" onChange={imageUpload} />\r\n            <input className=\"form-control  col-sm-4 mx-auto mb-2\" type=\"number\" onChange={font} min=\"10\" max=\"35\"  placeholder=\"Font Size\"/>\r\n            <input className=\"form-control  col-sm-4 mx-auto mb-2\" type=\"text\" onChange={fontColorFun}   placeholder=\"Font Color\"/>\r\n\r\n            <select className=\"form-control  col-sm-3 mx-auto  mb-2\" onChange={fontFamilyFun} type=\"select\">\r\n            <option defaultValue>Select Font style</option>\r\n            <option value=\"Comic Sans MS\">Comic Sans MS</option>\r\n            <option value=\"Times New Roman\">Times New Roman</option>\r\n            <option value=\"Courier New\">Courier New</option>\r\n            </select>\r\n            </div>\r\n            <div className=\" container form-inline\">\r\n            <button className=\"btn btn-success mx-auto col-sm-3 mt-3 mb-5\" onClick={download}>Download</button>\r\n            </div>\r\n            </div>\r\n            </div>\r\n           </div> \r\n           \r\n    )\r\n  }\r\n  \r\nexport default MyMemeApp;","import axios from \"axios\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { useEffect, useState } from \"react\";\r\nimport MyMemeApp from \"../comp/MyMemeApp\";\r\nimport {Card,CardImg } from 'reactstrap';\r\nimport Meme from '../meme/Meme';\r\nconst One=()=>{\r\n    \r\n    const[templates,setTemplates]=useState([]);\r\n    const[template,setTemplate]=useState(null);\r\n\r\n    useEffect(()=>{\r\n       \r\n        fetch(\"https://api.imgflip.com/get_memes\").then(x=>x.json().then(response=>setTemplates(response.data.memes)))\r\n    },[])\r\n    \r\n    \r\n    return(\r\n        <>\r\n        <div className=\"bg-success\">\r\n        <div className=\"jumbotron mb-0 bg-secondary \">\r\n        <h3>K-MEME GENERATOR</h3>\r\n       \r\n           {!template&&<h3 className=\"text-center mt-3 mb-0\">Pick A Meme</h3>}  \r\n        </div>\r\n        <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n        <li className=\"breadcrumb-item\"><a href=\"\">Home</a></li>\r\n        <li className=\"breadcrumb-item active\" aria-current=\"page\">Menu</li>\r\n  </ol>\r\n</nav>\r\n\r\n\r\n        {template && <MyMemeApp template={template} />}        \r\n        \r\n        <div className=\"container\">\r\n        <div class=\"row bg-dark\">\r\n        {!template && templates.map((template)=>{\r\n            return(\r\n                <>\r\n                <div className=\"col-12 col-md-3 m-0 p-0\"  >\r\n                    <div  className=\"bg-dark mt-2 m-1\" style={{border:\"3px solid white\"}} key={template.id}>\r\n                    <img style={{width:\"100%\",height:\"300px\"}} src={template.url} alt={template.name}  onClick={() => setTemplate(template)} />\r\n                    </div>\r\n                 </div>\r\n               {/* <card className=\"card col-12 col-sm-3 m-1\">\r\n                <img className=\"img img-fluid\" key={template.id} src={template.url} alt={template.name} onClick={()=>setTemplate(template)}/>\r\n              </card> */}\r\n                </>\r\n            )\r\n        })}\r\n        </div>\r\n        </div>\r\n       </div>\r\n        </>\r\n    );\r\n}\r\nexport default One;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/K_Logo_White.8dbb07b7.png\";","export default __webpack_public_path__ + \"static/media/google-badge.f902960a.png\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Photo from './gallary/Myphoto';\nimport Photos from './gallary/photos';\nimport './index.css';\nimport One from './meme/one';\n\nimport reportWebVitals from './reportWebVitals';\nimport TestApp1 from './TestApp1';\n\nReactDOM.render(\n  <React.StrictMode>\n    <One />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}